service:
  name: acceptessa-admission2

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: tessa_master_data
            sources: [./dev/circle.json]
  serverless-offline:
    httpsProtocol: ./.cert
    host: 0.0.0.0
    port: 3200

functions:
  main:
    handler: handler.main
    events:
      - http:
          method: post
          path: endpoint

resources:
  Resources:
    MasterDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_master_data
        AttributeDefinitions:
          - { AttributeType: S, AttributeName: id }
          - { AttributeType: S, AttributeName: parent }
          - { AttributeType: S, AttributeName: data_key }
          - { AttributeType: S, AttributeName: data_value }
        KeySchema:
          - { KeyType: HASH,  AttributeName: id }
          - { KeyType: RANGE, AttributeName: data_key }
        GlobalSecondaryIndexes:
          - IndexName: tessa_master_by_exhibition
            KeySchema:
              - { KeyType: HASH,  AttributeName: parent }
              - { KeyType: RANGE, AttributeName: id }
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: tessa_master_by_datakey
            KeySchema:
              - { KeyType: HASH,  AttributeName: data_key }
              - { KeyType: RANGE, AttributeName: data_value }
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    LogDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_log_data
        AttributeDefinitions:
          - { AttributeType: S, AttributeName: id }
          - { AttributeType: S, AttributeName: data_key }
          #- { AttributeType: L, AttributeName: data_value }
        KeySchema:
          - { KeyType: HASH,  AttributeName: id }
          - { KeyType: RANGE, AttributeName: data_key }
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ## api domain setting
    Domain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn: "${ssm:/tessa_checklist/acm_cert_arn~true}"
        DomainName: "admission.familiar-life.info"

    Mapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName: { Ref: Domain }
        RestApiId:  { Ref: ApiGatewayRestApi }
        Stage: dev

    RecordSetOfAPI:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "admission.familiar-life.info"
        Type: A
        HostedZoneName: "familiar-life.info."
        AliasTarget:
          DNSName: { Fn::GetAtt: [Domain, DistributionDomainName] }
          HostedZoneId: Z2FDTNDATAQYW2
